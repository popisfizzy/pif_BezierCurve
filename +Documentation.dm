/**
 ** pif_BezierCurve
 **   Version: 1.1.20160422
 **   Release Date: April 22, 2016
 **
 ***************************************************************************************************
 ***************************************************************************************************

pif_BezierCurve is a library which implements a class to handle the generation of Bézier curve
sample points for drawing. The library does not handle the actual drawing of this class.

 +---------------------------------------------------+
 |                                                   |
 |  Contents                                         |
 |  1. License                                       |
 |  2. GitHub Repository                             |
 |  3. Introduction                                  |
 |  4. Example                                       |
 |  5. Preprocessors                                 |
 |  6. The /pif_BezierCurve class                    |
 |  7. Release Notes                                 |
 |  8. To Do/Plans                                   |
 |                                                   |
 +---------------------------------------------------+

  1. License
  ----------------------------------------------------

  The code for pif_BezierCurve is released under the MIT License. Refer to "+License.dm" for the
  full text of the license.

  2. GitHub Repository
  ----------------------------------------------------

  The GibHub reposity for this library is available at the following URL. Feel free to fork the
  repository at any time!

    https://github.com/popisfizzy/pif_BezierCurve

  3. Introduction
  ----------------------------------------------------

  Bézier curves are smooth parametric curves in arbitrary dimensions generated by a collection of n
  points. Their 'nice' behavior gives them many uses in computer graphics, and on top of that they
  look quite good too. They can also be naturally transformed by linear maps (i.e., linear
  transformations or matrix transformations) by simply transforming the n sample points.

  At this time, this library provides no means to actually draw the curve or produce an image of the
  curve, and instead simply outputs a list of points which the programmer must use to draw lines
  between in order to approximate the curve.

  4. Example
  ----------------------------------------------------

  Below is an example of how one could use this library to draw a Bézier curve for nine points with
  a "smoothness" (see Section 4.) of 50, where the points are: (0,0), (1,1), (2,2), (3,3), (4,4),
  (5,3), (6,2), (7,1), (8,0). This is assuming we have a DrawLine() method available that takes two
  points and draws a line between them.

    var
        pif_BezierCurve/C = new(0,0 , 1,1 , 2,2 , 3,3 , 4,4 , 5,3 , 6,2 , 7,1 , 8,0)
        list/Curve

        last_x
        last_y

    C.Smoothness(50)
    Curve = C.Curve()

    last_x = Curve[1]
    last_y = Curve[2]

    for(var/i = 1, i < C.Smoothness(), i ++)
        var
            new_x = Curve[2*i+1]
            new_y = Curve[2*i+2]

        DrawLine(last_x,last_y , new_x,new_y)

        last_x = new_x
        last_y = new_y

  To see an example of what this Bézier curve looks like, refer to the hub.

  5. Preprocessors
  ----------------------------------------------------

  By default, the namespace of this library is prefixed, i.e. /pif_BezierCurve has the prefix pif_
  on it. This can be removed by either,

    1. Defining PIF_NOPREFIX_BEZIERCURVE, which will remove the prefix from only this library.
    2. Defining PIF_NOPREFIX_GENERAL, which will remove the prefix from this library and all others
       of mine that in the future will have similar prefixing.

  As expected, the unprefixed namespace is /BezierCurve

  There is also a PIF_BEZIERCURVE_INCLUDED flag defined, to allow for the optional inclusion of code
  depending on the presence of this library.

  6. The /pif_BezierCurve class
  ----------------------------------------------------

    +-------------------------------+
    |  Parent Class: /datum         |
    |  Namespace: /pif_BezierCurve  |
    |  File: pif_BezierCurve.dm     |
    +-------------------------------+

  The /pif_BezierCurve class is used to generate sample points to draw lines between in order to get
  an approximation of a Bézier curve.

    New()
    --------------------

      Arguments.

        Either an list of arguments or a /list object, either of which must have an even length and
        contain only numeric data. The odd elements of these will refer to the x coordinates, and
        the even elements will refer to the y coordinates. The first pair is the first control point
        of the Bézier curve, the second pair the second control point, and so on.

        Note that the Bézier curve will always start on the first control point and end on the last
        point. The rest of the curve will be on or within the convex hull of the control points.

      Behavior.

        Populates the /pif_BezierCurve object with the sample points.

      Exceptions

        - A /pif_BezierCurve/InvalidConstructorArgumentFormatException exception is thrown if no
          argument is passed to the constructor.
        - A /pif_BezierCurve/InvalidArgumentDataTooFewPointsException exception is thrown if the
          provided argument data contains less than four data points.
        - A /pif_BezierCurve/InvalidArgumentDataOddNumberException exception is thrown if the
          provided argument data contains an odd number of data points.

    AddPoint()
    --------------------

      Arguments.

        A pair of numbers.

      Behavior.

        Adds the point indicated by the pair of numbers to the end of the points, making it the last
        control point.

      Returns.

        The new number of control points.

    ArcLength()
    --------------------

      Arguments.

        The number of points of smoothness, or no argument if using the default amount.

      Returns.

        The approximate Euclidean arclength of the Bézier curve, and the exact (up to floating point
        precision) arclength of the approximated Bézier curve with the specified number of sample
        points.

    Bezier()
    --------------------

      Arguments.

        A number ("time") in the range [0, 1].

      Behavior.

        Gives the value of the Bézier function at the specified time. That is, it gives the point on
        the Bézier curve at the given time.

      Returns.

        A /list object, where the first element is the x coordinate and the second element is the
        y coordinate.

    ClearTransform()
    --------------------

      Arguments.

        None.

      Behavior.

        Clears out any existing transformatinos applied to the Bézier curve.

      Returns.

        True.

    Close()
    --------------------

      Arguments.

        None.

      Behavior.

        "Closes" the Bézier curve by adding a new point equal to the last point. Because a Bézier
        curve always starts on its first control points and ends on its last control point, this
        will make the two coincide and the Bézier curve will have a well-defined interior.

      Returns.

        True, if the point was added (meaning the curve was not already closed) and false otherwise.

    Curvature()
    --------------------

      Arguments.

        A value ("time") in the range [0, 1].

      Behavior.

        Computes the unsigned Euclidean curvature at the point specified. Intuitively, this measures how
        "curvy" the Bézier curve is at the specified time, where a line has curvature 0.

      Returns.

        The curvature, generally a floating point number.

    Curve()
    --------------------

      Arguments.

        An optional argument to superecede the default smoothness. This will not change the
        pif_BezierCurve object's smoothness value, and is only used once per call to Curve().

      Behavior.

        Generates the sample points used to draw an approximation of the Bézier curve.

      Returns.

        A list of length 2*Smoothness() (i.e., of the number of sample points indicated by
        Smoothness()). This is the sample points to draw lines between, where the first sample point
        is the same as the first control point, and the last sample point is the same as the last
        control point. The odd terms are the x-coordinates of the sample points, and the even terms
        are the y-coordinates of the sample points.

    Derivative()
    --------------------

      Arguments.

        A value ("time") in the range [0, 1].

      Behavior.

        Computes the "pointwise parametric curvature" of the Bézier curve at specified time. That is,
        it outputs a pair of numbers where the first is the derivative along the x coordinate and
        the second is along the y coordinate. To get back to the "standard" two-dimensional parametric
        derivative, one simply divides the second value by the first.

      Returns.

        A /list object, where the first element is the value of the derivative along the x axis and
        the second element is the value of the derivative along the y axis.

    Displacement()
    --------------------

      Arguments.

        None.

      Returns.

        A pair of numbers, which is the vector displacement from the first point on the Bézier curve
        to the last point.

    Distance()
    --------------------

      Arguments.

        None.

      Returns.

        A number, the Euclidean distance from the first point on the Bézier curve to the last point.

    FirstPoint()
    --------------------

      Arguments.

        None.

      Returns.

        A /list element whose first element is the x-coordinate of the first control point and whose
        second element is the y-coordinate of the first control point.

    InsertPoint()
    --------------------

      Arguments.

        1. An integer whose absolute value is between 1 and Length() (refer below for this method).
           Positive values meaure from the first control point (i.e., p = 1 means the first control
           point) while negative values measure from the last control point (i.e., p = -1 means the
           last control point.
        2. The x-coordinate of the control point to be added.
        3. The y-coordinate of the control point to be added.

      Behavior.

        Inserts the control point (x,y) into the control points at the position specified by p.

      Returns.

        The new number of control points.

    LastPoint()
    --------------------

      Arguments.

        None.

      Returns.

        A /list element whose first element is the x coordinate of the last control point and whose
        second element is the y coordinate of the last control point.

    Length()
    --------------------

      Arguments.

        None.

      Returns.

        A natural number, the number of control points.

    NudgePoint()
    --------------------

      Arguments.

        1. An integer whose absolute value is between 1 and Length() (refer below for this method).
           Positive values meaure from the first control point (i.e., p = 1 means the first control
           point) while negative values measure from the last control point (i.e., p = -1 means the
           last control point).
        2. The amount to add to the x coordinate of the point at position p.
        3. The amount to add to the y coordinate of the point as position p.

      Behavior.

        This adds (dx,dy) to the point (x,y) at position p.

      Returns.

        True on success.

    Open()
    --------------------

      Arguments.

        None.

      Behavior.

        "Opens" the Bézier curve by deleting the last control point if it was equal to the first
        control point. This will make the curve "open" and have no well-defined interior.

      Returns.

        True, if the point was deleted (meaning the curve was not already open) and false otherwise.

    Point()
    --------------------

      Arguments.

        1: An integer whose absolute value is between 1 and Length() (refer below for this method).
           Positive values meaure from the first control point (i.e., p = 1 means the first control
           point) while negative values measure from the last control point (i.e., p = -1 means the
           last control point.

      Returns.

        A /list object, whose first element is the x-coordinate of the control point at position p
        and whose second element is the y-coordinate of the control point at position p.

    RemovePoint()
    --------------------

      Arguments.

        An integer whose absolute value is between 1 and Length() (refer below for this method).
        Positive values meaure from the first control point (i.e., p = 1 means the first control point)
        while negative values measure from the last control point (i.e., p = -1 means the last control
        point).

      Behavior.

        Removes the control point at position p.

      Returns.

        The new number of control points.

    Smoothness()
    --------------------

      Arguments.

        The new "smoothness". Defaults to the current smoothness.

      Behavior.

        Sets the smoothness of the output curve. This refers to the total number of sample points
        that will be generated and thus is 1/2 the length of the output list of the Curve()
        function. Higher values of smoothness result in a smoother-looking curve, hence the name.

      Returns.

        The current smoothness.

    Transform()
    --------------------

      Arguments.

        Takes either a matrix, or a list or argument list of six numeric values (the same one would
        use to construct a matrix).

      Behavior.

        Applies the transformation to all the provided control points.

      Returns.

        True.

      Exceptions.

        - A /pif_BezierCurve/InvalidArgumentFormatException exception is thrown if the six data points
          of a DM matrix are not included, or if the argument format is otherwise invalid.

  7. Release Notes
  ----------------------------------------------------

  Version 1.1.20160422

  - Rewrote some code, changing the exact behavior of transformations but leaving this mostly-
    transparent to the end user.

  - Added the following methods.
    - ArcLength()
    - Bezier()
    - ClearTransform()
    - Curvature()
    - Derivative()
    - Displacement()
    - Distance()
    Refer to the documentation for details.

  - Released the code under the MIT License.
  - Added GitHub repo information.
  - Updated documentation formatting and added details on exceptions.

  Version 1.0.20160413

  - Initial release.

  8. To Do/Plans
  ----------------------------------------------------

  * Implement curve drawing and color curve transformation, if and when DM gets native line
    primitives.

  * Implement an adaptive subclass, which selects more sample points from regions of the curve that
    have a higher curvature. This would be more processor-intensive in selecting the points (it
    requires sampling more points and computing the derivatives to find the curvature) but it would
    be quicker to draw and likely look smoother with fewer sample points.

****************************************************************************************************
****************************************************************************************************/